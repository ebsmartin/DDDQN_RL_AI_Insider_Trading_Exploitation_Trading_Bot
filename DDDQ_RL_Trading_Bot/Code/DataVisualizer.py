import matplotlib.pyplot as plt
import json


class DataVisualizer:
    def __init__(self):
        with open ("Output/episode_mem.json", "r") as f:
            self.episode_data = json.load(f)
        with open ("Output/testing_mem.json", "r") as f:
            self.testing_data = json.load(f)

    def plot_portfolio_value(self, data, title, asset_price, filename):
        plt.figure(figsize=(20, 12))
        plt.plot(asset_price["Close"][::50], label="Asset Price")
        plt.plot(data[len(data)-1]["Portfolio Value"][::50], label="Portfolio Value")
        plt.xlabel("Time Steps")
        plt.ylabel("Value")
        plt.legend()
        plt.title(title)
        plt.savefig(filename)

    def plot_portfolio_value_test(self, data, title, asset_price, filename):
        plt.figure(figsize=(20, 12))
        plt.plot(asset_price["Close"][::10], label="Asset Price")
        plt.plot(data["Portfolio Value"][::10], label="Portfolio Value")
        plt.xlabel("Time Steps")
        plt.ylabel("Value")
        plt.legend()
        plt.title(title)
        plt.savefig(filename)

    def plot_inventory_held(self, data, title, filename):
        plt.figure(figsize=(12, 6))
        plt.plot(data["Inventory Size"][::10], label="Inventory Held")
        plt.xlabel("Time Steps")
        plt.ylabel("Amount")
        plt.title(title)
        plt.legend()
        plt.grid()
        plt.savefig(filename)

    def plot_actions(self, data, title, filename):
        plt.figure(figsize=(12, 6))
        plt.plot(data["Actions"][::10], label="Actions")
        plt.xlabel("Time Steps")
        plt.ylabel("Action")
        plt.title(title)
        plt.legend()
        plt.grid()
        plt.savefig(filename)

    def plot_realized_profit(self, data, title, filename):
        plt.figure(figsize=(12, 6))
        plt.plot(data["Realized Profit"][::10], label="Realized Profit")
        plt.xlabel("Time Steps")
        plt.ylabel("Profit")
        plt.title(title)
        plt.legend()
        plt.grid()
        plt.savefig(filename)

    def plot_reward(self, data, title, filename):
        plt.figure(figsize=(12, 6))
        plt.plot(data["Reward"][::10], label="Reward")
        plt.xlabel("Time Steps")
        plt.ylabel("Reward")
        plt.title(title)
        plt.legend()
        plt.grid()
        plt.savefig(filename)

    def plot_mse_loss(self, data, title, filename):
        plt.figure(figsize=(12, 6))
        plt.plot(data["MSE Loss"][::10], label="MSE Loss")
        plt.xlabel("Time Steps")
        plt.ylabel("Loss")
        plt.title(title)
        plt.legend()
        plt.grid()
        plt.savefig(filename)

    def plot_epsilon(self, data, title, filename):
        plt.figure(figsize=(12, 6))
        plt.plot(data["Epsilon"][::10], label="Epsilon")
        plt.xlabel("Time Steps")
        plt.ylabel("Epsilon")
        plt.title(title)
        plt.legend()
        plt.grid()
        plt.savefig(filename)

    def visualize_data(self, episode_interval=10):
        # Create a list to hold the profit data for all episodes
        all_episode_profits = []

        # Loop over every episode in self.episode_data
        for i in range(0, len(self.episode_data), episode_interval):
            # Append the profit data for the current episode to all_episode_profits
            all_episode_profits.extend(self.episode_data[i]["Realized Profit"])

        # Plot the profit data for all episodes
        self.plot_realized_profit(all_episode_profits, f"Realized Profit for All Training Episodes", "Output/all_episodes_profit.png")

        # Continue with the rest of the original visualize_data method
        self.plot_realized_profit(self.testing_data, f"Realized Profit for Testing", "Output/testing_profit.png")
        self.plot_reward(self.episode_data[-1], f"Reward for Training", "Output/episode_reward.png")
        self.plot_reward(self.testing_data, f"Reward for Testing", "Output/testing_reward.png")
        self.plot_mse_loss(self.episode_data[-1], f"MSE Loss for Training", "Output/episode_loss.png")
        self.plot_epsilon(self.episode_data[-1], f"Epsilon for Training", "Output/episode_epsilon.png")