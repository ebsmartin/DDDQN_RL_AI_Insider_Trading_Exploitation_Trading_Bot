# import matplotlib.pyplot as plt
import json


class DataVisualizer:
    def __init__(self):
        with open ("Output/episode_mem_epoch_4.json", "r") as f:
            self.episode_data = json.load(f)
        with open ("Output/testing_mem.json", "r") as f:
            self.testing_data = json.load(f)

    def plot_portfolio_value(self, data, title, filename):
        plt.figure(figsize=(20, 12))
        plt.plot(data[len(data)-1]["Portfolio Value"], label="Portfolio Value")
        plt.xlabel("Time Steps")
        plt.ylabel("Value")
        plt.legend()
        plt.title(title)
        plt.savefig(filename)

    def plot_portfolio_value_test(self, data, title, filename):
        plt.figure(figsize=(20, 12))
        plt.plot(data["Portfolio Value"], label="Portfolio Value")
        plt.xlabel("Time Steps")
        plt.ylabel("Value")
        plt.legend()
        plt.title(title)
        plt.savefig(filename)

    def plot_inventory_held(self, data, title, filename):
        plt.figure(figsize=(12, 6))
        plt.plot(data["Inventory Size"], label="Inventory Held")
        plt.xlabel("Time Steps")
        plt.ylabel("Amount")
        plt.title(title)
        plt.legend()
        plt.grid()
        plt.savefig(filename)

    def plot_actions(self, data, title, filename):
        plt.figure(figsize=(12, 6))
        plt.plot(data["Actions"], label="Actions")
        plt.xlabel("Time Steps")
        plt.ylabel("Action")
        plt.title(title)
        plt.legend()
        plt.grid()
        plt.savefig(filename)

    def plot_reward(self, data, title, filename):
        plt.figure(figsize=(12, 6))
        plt.plot(data["Reward"], label="Reward")
        plt.xlabel("Time Steps")
        plt.ylabel("Reward")
        plt.title(title)
        plt.legend()
        plt.grid()
        plt.savefig(filename)

    def plot_balance(self, data, title, filename):
        plt.figure(figsize=(12, 6))
        plt.plot(data["Balance"], label="Balance")
        plt.xlabel("Time Steps")
        plt.ylabel("Balance")
        plt.title(title)
        plt.legend()
        plt.grid()
        plt.savefig(filename)

    def plot_mse_loss(self, data, title, filename):
        plt.figure(figsize=(12, 6))
        plt.plot(data["MSE Loss"], label="MSE Loss")
        plt.xlabel("Time Steps")
        plt.ylabel("Loss")
        plt.title(title)
        plt.legend()
        plt.grid()
        plt.savefig(filename)

    def plot_epsilon(self, data, title, filename):
        plt.figure(figsize=(12, 6))
        plt.plot(data["Epsilon"], label="Epsilon")
        plt.xlabel("Time Steps")
        plt.ylabel("Epsilon")
        plt.title(title)
        plt.legend()
        plt.grid()
        plt.savefig(filename)

    def visualize_data(self, episode_interval=10):

        # Continue with the rest of the original visualize_data method
        self.plot_reward(self.episode_data[-1], f"Reward for Training", "Output/episode_reward.png")
        self.plot_reward(self.testing_data, f"Reward for Testing", "Output/testing_reward.png")
        self.plot_mse_loss(self.episode_data[-1], f"MSE Loss for Training", "Output/episode_loss.png")
        self.plot_epsilon(self.episode_data[-1], f"Epsilon for Training", "Output/episode_epsilon.png")
        self.plot_portfolio_value(self.episode_data, f"Portfolio Value for Training", "Output/episode_portfolio_value.png")
        self.plot_portfolio_value_test(self.testing_data, f"Portfolio Value for Testing",  "Output/testing_portfolio_value.png")
        self.plot_inventory_held(self.episode_data[-1], f"Inventory Held for Training", "Output/episode_inventory.png")
        self.plot_actions(self.episode_data[-1], f"Actions for Training", "Output/episode_actions.png")
        self.plot_balance(self.episode_data[-1], f"Balance for Training", "Output/episode_balance.png")
        self.plot_balance(self.testing_data, f"Balance for Testing", "Output/testing_balance.png")