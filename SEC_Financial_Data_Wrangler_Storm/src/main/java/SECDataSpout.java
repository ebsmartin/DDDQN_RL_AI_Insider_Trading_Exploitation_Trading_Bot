import org.apache.storm.spout.SpoutOutputCollector;
import org.apache.storm.task.TopologyContext;
import org.apache.storm.topology.OutputFieldsDeclarer;
import org.apache.storm.topology.base.BaseRichSpout;
import org.apache.storm.tuple.Fields;
import org.apache.storm.tuple.Values;
import java.util.List;
import java.util.Map;
import com.google.common.util.concurrent.RateLimiter;

import java.net.HttpURLConnection;
import java.net.URL;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.IOException;
import java.net.MalformedURLException;

import java.time.LocalDate;
import java.time.format.DateTimeFormatter;

public class SECDataSpout extends BaseRichSpout {
    private RateLimiter rateLimiter;
    private SpoutOutputCollector collector;
    private List<String> SECData;
    private String header;
    private int index = 0;

    // Get the API key from environment variable
    String API_KEY = System.getenv("API_KEY");;

    public SECDataSpout(List<String> SECData, String SECHeader) {
        this.SECData = SECData;
        this.header = SECHeader;
        System.out.println("Length of SEC Historical Data File: " + SECData.size());
        // Create a RateLimiter that allows 50 permits per minute
        // We get 100 requests per minute from the AlphaVantage API
        // We have 2 spouts, so we can make 50 requests per minute per spout
        this.rateLimiter = RateLimiter.create(50.0);
    }

    @Override
    public void open(Map conf, TopologyContext context, SpoutOutputCollector collector) {
        this.collector = collector;
    }

    @Override
    public void nextTuple() {
        if (index >= SECData.size()) {
            // Stop emitting if all lines have been sent
            this.collector.emit(new Values("END", "END"));
            return;
        }

        // Acquire a permit before making an API request
        rateLimiter.acquire();

        // Define stock symbol and time periods
        String[] data = SECData.get(index).split(",");

        String symbol = data[2];  // Stock symbol

        // Define date format
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd");

        // Parse dates
        LocalDate filingDate = LocalDate.parse(data[0], formatter);

        // Define window (Unsure of a good window for this.)
        LocalDate windowStart = filingDate.minusDays(3);
        LocalDate windowEnd = windowStart.plusDays(10);

        // Check if window spans one or two months
        // For ease of implementation, we will only consider windows that span one month
        boolean doesWindowSpanTwoMonths = windowStart.getMonthValue() != windowEnd.getMonthValue();

        // If window spans two months, we will not make a request
        if (doesWindowSpanTwoMonths) {
            index++;
            return;
        }

        // Define month for API request
        String month = String.valueOf(windowStart.getMonthValue());
        
        // AlphaVantage API parameters
        String interval = "15min"; // The following values are supported: 1min, 5min, 15min, 30min, 60min
        String extendedHours = "false";  // Set to true to include extended hours data
        String dataType = "csv"; // The following values are supported: json, csv

        HttpURLConnection conn = null; // Initialize connection to null

        try {
            // Construct the URL for the AlphaVantage API
            URL url = null;

            url = new URL("https://www.alphavantage.co/query?function=TIME_SERIES_INTRADAY&symbol=" + symbol 
                            + "&interval=" + interval + "&month=" + month + "&extended_hours=" + extendedHours 
                            + "&datatype=" + dataType + "&apikey=" + API_KEY + "&outputsize=full");
                    
            // Open a connection to the URL
            conn = (HttpURLConnection) url.openConnection();

            // Get the response code
            int responseCode = conn.getResponseCode();


            // If the response code is 200 (HTTP_OK), read the response
            if (responseCode == HttpURLConnection.HTTP_OK) {
                BufferedReader in = new BufferedReader(new InputStreamReader(conn.getInputStream()));
                String inputLine;
                StringBuffer response = new StringBuffer();

                while ((inputLine = in.readLine()) != null) {
                    response.append(inputLine);
                    response.append("\n"); // adding newline so the csv will be easier to unflatten
                }
                in.close();

                // Convert the response stream into a string
                String csvResponse = response.toString();

                // Emit the SEC data row and the financial data csv flattened string
                this.collector.emit(new Values(header + "\n" + SECData.get(index), csvResponse));
            } else {
                System.out.println("GET request not worked");
            }

        } catch (MalformedURLException e) {
            System.out.println("Invalid URL: " + e.getMessage());
        } catch (IOException e) {
            System.out.println("Error reading from the URL: " + e.getMessage());
        } finally {
            if (conn != null) {
                conn.disconnect();
            }
        }

        index++;
    }

    @Override
    public void declareOutputFields(OutputFieldsDeclarer declarer) {
        declarer.declare(new Fields("Header_n_SEC_data", "financial_data"));
    }
}
