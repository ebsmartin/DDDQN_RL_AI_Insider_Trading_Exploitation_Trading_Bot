import org.apache.storm.spout.SpoutOutputCollector;
import org.apache.storm.task.TopologyContext;
import org.apache.storm.topology.OutputFieldsDeclarer;
import org.apache.storm.topology.base.BaseRichSpout;
import org.apache.storm.tuple.Fields;
import org.apache.storm.tuple.Values;
import java.util.List;
import java.util.Map;
import com.google.common.util.concurrent.RateLimiter;

import java.net.HttpURLConnection;
import java.net.URL;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.IOException;
import java.net.MalformedURLException;
import java.time.DayOfWeek;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.time.LocalDateTime;

public class SECDataSpout extends BaseRichSpout {
    private RateLimiter rateLimiter;
    private SpoutOutputCollector collector;
    private List<String> SECData;
    private String header;
    private int index = 0;

    private Boolean hasEnded = false;

    // Get the API key from environment variable
    String API_KEY = System.getenv("API_KEY");

    public SECDataSpout(List<String> SECData, String SECHeader) {
        this.SECData = SECData;
        this.header = SECHeader;
        System.out.println("Length of SEC Historical Data File: " + SECData.size());
    }

    @Override
    public void open(Map conf, TopologyContext context, SpoutOutputCollector collector) {
        this.collector = collector;
        // Create a RateLimiter that allows 50 permits per minute
        // We get 100 requests per minute from the AlphaVantage API
        // We have 2 spouts, so we can make 50 requests per minute per spout
        this.rateLimiter = RateLimiter.create(50.0 / 60.0);    
    }


    private String getAPIResponse(String symbol, String month, String interval, String extendedHours, String dataType, LocalDate windowStart, LocalDate windowEnd) {
        HttpURLConnection conn = null; // Initialize connection to null
        StringBuffer response = new StringBuffer();
    
        try {
            // Construct the URL for the AlphaVantage API
            URL url = new URL("https://www.alphavantage.co/query?function=TIME_SERIES_INTRADAY&symbol=" + symbol 
                            + "&interval=" + interval + "&month=" + month + "&extended_hours=" + extendedHours 
                            + "&datatype=" + dataType + "&apikey=" + API_KEY + "&outputsize=full");
    
            // Open a connection to the URL
            conn = (HttpURLConnection) url.openConnection();
    
            System.out.println("\n" + url + "\n");

            // Get the response code
            int responseCode = conn.getResponseCode();
    
            // If the response code is 200 (HTTP_OK), read the response
            if (responseCode == HttpURLConnection.HTTP_OK) {
                BufferedReader in = new BufferedReader(new InputStreamReader(conn.getInputStream()));
                String inputLine;
                DateTimeFormatter newFormatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
                boolean isFirstLine = true;  // Flag to check if the current line is the first line (header)
    
                while ((inputLine = in.readLine()) != null) {
                    // Check if the response contains an error message
                    if (inputLine.contains("Error Message")) {
                        System.out.println("Error in API response: " + inputLine);
                        continue;
                    }
    
                    // If it's the first line, it's the header. Append it to the response.
                    if (isFirstLine) {
                        // response.append(inputLine);
                        // response.append("\n"); // adding newline so the csv will be easier to unflatten
                        isFirstLine = false;
                        continue;
    
                    // Check if the response contains a date
                    } else {
                        if (!inputLine.matches("\\d{4}-\\d{2}-\\d{2}.*")) {
                            System.out.println("Invalid date in API response: " + inputLine);
                            continue;
                        } else {
                            // Split the line into columns
                            String[] columns = inputLine.split(",");
                            if (columns.length > 0 && columns[0] != null && !columns[0].startsWith("}")) {
                                LocalDateTime timestamp = LocalDateTime.parse(columns[0], newFormatter);
                                // // Check if the timestamp falls within the window
                                if (timestamp.toLocalDate().isBefore(windowStart.minusDays(26)) || !timestamp.toLocalDate().isAfter(windowEnd)) {
                                    response.append(inputLine);
                                    response.append("\n"); // adding newline so the csv will be easier to unflatten
                                }
                            } else {
                                System.out.println("Invalid timestamp: " + columns[0]);
                            }
                        }
                    }
                }
                in.close();
            } else {
                System.out.println("GET request not worked");
            }
    
        } catch (MalformedURLException e) {
            System.out.println("Invalid URL: " + e.getMessage());
        } catch (IOException e) {
            System.out.println("Error reading from the URL: " + e.getMessage());
        } finally {
            if (conn != null) {
                conn.disconnect();
            }
        }
    
        return response.toString();
    }

    @Override
    public void nextTuple() {
        if (hasEnded) {
            return;
        }

        if (index >= SECData.size()) {
            // Emit the "END" tuple
            this.collector.emit(new Values("END", "END"));
            hasEnded = true;
            return;
        }

        // Acquire a permit before making an API request
        rateLimiter.acquire();

        // Define stock symbol and time periods
        String[] data = SECData.get(index).split(",");

        String symbol = data[3];  // Stock symbol

        // Define date format
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd");

        // Parse dates
        LocalDate filingDate = LocalDate.parse(data[1], formatter);

        // grab yyyy-MM from filing date and save as month
        String month = filingDate.toString().substring(0, 7);

        // Get the previous month
        LocalDate previousMonthDate = filingDate.minusMonths(1);
        String previousMonth = previousMonthDate.format(formatter).substring(0, 7);

        // Get the next month
        LocalDate nextMonthDate = filingDate.plusMonths(1);
        String nextMonth = nextMonthDate.format(formatter).substring(0, 7);

        // Define the window for the financial data
        LocalDate windowStart = filingDate.minusDays(3);
        while (windowStart.getDayOfWeek() == DayOfWeek.SATURDAY || windowStart.getDayOfWeek() == DayOfWeek.SUNDAY) {
            windowStart = windowStart.minusDays(1);
        }

        LocalDate windowEnd = windowStart;
        int businessDays = 0;
        while (businessDays < 17) {
            windowEnd = windowEnd.plusDays(1);
            if (windowEnd.getDayOfWeek() != DayOfWeek.SATURDAY && windowEnd.getDayOfWeek() != DayOfWeek.SUNDAY) {
                businessDays++;
            }
        }

        // Check if window spans one or two months
        boolean doesWindowSpanTwoMonths = windowStart.getMonthValue() != windowEnd.getMonthValue();


        // AlphaVantage API parameters
        String interval = "30min"; // The following values are supported: 1min, 5min, 15min, 30min, 60min
        String extendedHours = "false";  // Set to true to include extended hours data
        String dataType = "csv"; // The following values are supported: json, csv

        
        // Get the API responses for the current month and the previous month
        String csvResponseCurrentMonth = getAPIResponse(symbol, month, interval, extendedHours, dataType, windowStart, windowEnd);
        String csvResponsePreviousMonth = getAPIResponse(symbol, previousMonth, interval, extendedHours, dataType, windowStart, windowEnd);

        // If window spans two months, we will not make a request
        if (doesWindowSpanTwoMonths) {
            String csvResponseNextMonth = getAPIResponse(symbol, nextMonth, interval, extendedHours, dataType, windowStart, windowEnd);
            String csvResponse = csvResponseNextMonth + csvResponseCurrentMonth + csvResponsePreviousMonth;
            // Emit the SEC data row and the financial data csv flattened string
            this.collector.emit(new Values(header + "\n" + SECData.get(index), csvResponse));
        } else {
            String csvResponse = csvResponseCurrentMonth + csvResponsePreviousMonth;
            // Emit the SEC data row and the financial data csv flattened string
            this.collector.emit(new Values(header + "\n" + SECData.get(index), csvResponse));
        }
        index++;
    }

    @Override
    public void declareOutputFields(OutputFieldsDeclarer declarer) {
        declarer.declare(new Fields("Header_n_SEC_data", "financial_data"));
    }
}
