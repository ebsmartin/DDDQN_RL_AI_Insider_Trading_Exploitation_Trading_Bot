import org.apache.storm.task.OutputCollector;
import org.apache.storm.task.TopologyContext;
import org.apache.storm.topology.OutputFieldsDeclarer;
import org.apache.storm.topology.base.BaseRichBolt;
import org.apache.storm.tuple.Tuple;

import java.util.Map;
import org.json.JSONObject;
import org.json.JSONArray;
import org.apache.storm.tuple.Values;
import org.apache.storm.tuple.Fields;


public class FeatureEngineeringBolt extends BaseRichBolt {
    private OutputCollector collector;

    @Override
    public void prepare(Map stormConf, TopologyContext context, OutputCollector collector) {
        this.collector = collector;
    }

    // The execute method is called to process tuples.
    @Override
    public void execute(Tuple tuple) {
        // Get the weather data from the tuple
        String weatherData = tuple.getStringByField("weatherData");
        // Parse the weather data into a JSON object
        JSONObject weatherJson = new JSONObject(weatherData);
        // Get the location object from the weather data
        JSONObject location = weatherJson.getJSONObject("location");
        // Get the region from the location object
        String region = location.getString("region");
        // Print the received state
        System.out.println("Received State: " + region);

        // Get the forecast days from the weather data
        JSONArray forecastDays = weatherJson.getJSONObject("forecast").getJSONArray("forecastday");
        for (int i = 0; i < forecastDays.length(); i++) {
            JSONObject day = forecastDays.getJSONObject(i);

            // Get the hours from the day
            JSONArray hours = day.getJSONArray("hour");
            for (int j = 0; j < hours.length(); j++) {
                JSONObject hour = hours.getJSONObject(j);
                // Get the date and cloud coverage from the hour
                String date = hour.getString("time");
                int cloudCoverage = hour.getInt("cloud");
                // Print the date and cloud coverage
                System.out.println(date + " -> Cloud Coverage: " + cloudCoverage);

                // Emit the region and cloudCoverage values
                collector.emit(new Values(region, cloudCoverage));
            }
        }

        // Acknowledge that the tuple has been processed
        collector.ack(tuple);
    }

    // The declareOutputFields method declares the output schema for the bolt
    @Override
    public void declareOutputFields(OutputFieldsDeclarer declarer) {
        declarer.declare(new Fields("region", "cloudCoverage"));
    }
}