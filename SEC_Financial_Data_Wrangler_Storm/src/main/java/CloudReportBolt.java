import org.apache.storm.task.OutputCollector;
import org.apache.storm.task.TopologyContext;
import org.apache.storm.topology.OutputFieldsDeclarer;
import org.apache.storm.topology.base.BaseRichBolt;
import org.apache.storm.tuple.Tuple;

import java.util.*;

public class CloudReportBolt extends BaseRichBolt {
    private Map<Integer, Map<String, Integer>> countsPerCloudCoverageLevel;

    @Override
    public void prepare(Map<String, Object> topoConf, TopologyContext context, OutputCollector collector) {
        this.countsPerCloudCoverageLevel = new HashMap<>();
    }

    @Override
    public void execute(Tuple input) {
        int cloudCoverageLevel = input.getIntegerByField("cloudCoverageLevel");
        String state = input.getStringByField("state");
        int frequency = input.getIntegerByField("frequency");

        countsPerCloudCoverageLevel.putIfAbsent(cloudCoverageLevel, new HashMap<>());
        countsPerCloudCoverageLevel.get(cloudCoverageLevel).put(state, frequency);

        printReport();
    }

    private void printReport() {
        for (int cloudCoverageLevel = 1; cloudCoverageLevel <= 5; cloudCoverageLevel++) {
            Map<String, Integer> counts = countsPerCloudCoverageLevel.get(cloudCoverageLevel);
            if (counts != null) {
                System.out.println(" Cloud Coverage Level " + cloudCoverageLevel + ":");
                counts.entrySet().stream()
                        .sorted(Map.Entry.<String, Integer>comparingByValue().reversed())
                        .limit(5)
                        .forEach(entry -> System.out.println(entry.getKey() + ": " + entry.getValue()));
            }
        }
    }

    @Override
    public void declareOutputFields(OutputFieldsDeclarer declarer) {
        // This bolt does not emit any tuples
    }

    @Override
    public Map<String, Object> getComponentConfiguration() {
        return null;
    }
}